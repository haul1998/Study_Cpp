25강. 클래스 - 텍스트형 RPG 게임 2

강의 내용
 - 클래스는 구조체와 마찬가지로 여러 유형의 데이터를 하나로 묶어서 사용 가능한 형식이다.
   클래스는 내부적으로 3가지 타입의 영역으로 구분하여 사용할 수 있다.
   ㄴ private : 해당 클래스 내부에서만 접근이 가능하다.
   ㄴ protected : 해당 클래스와 해당 클래스의 자식 클래스에서 접근이 가능
   ㄴ public : 외부에서도 자유롭게 접근이 가능

강의 과제
 - 머드 게임 개발에 필요하다고 생각되는 객체들에 대하여 클래스를 추가로 선언하여 만들고
   필요한 데이터들을 선언 및 해당 데이터에 대한 겟터, 셋터를 만들어보기

===============================================

26강. 클래스 - 텍스트형 RPG 게임 3

강의 내용
 - 클래스에 특정 객체에 대한 정보 및 기능을 구현하여 그 객체를 구현한다.
 - 데이터들을 객체화하여 구현하는 것을 "객체지향 프로그래밍"이라고 한다.
 - 구현된 클래스를 사용할 때는 해당 클래스의 헤더 파일을 include 시키고,
   구조체와 마찬가지로 선언하여 사용할 수 있다.

강의 과제
 - 이번 강의 내용을 참고하여 몬스터 클래스를 만들어보기

===============================================

27강. 텍스트형 RPG 게임 4 - 플레이어, 몬스터, 전투

강의 내용
 - 지역(영역) 등 네이밍이 필요한 설정에 대해서는 enum문을 활용하여 정의를 하는 것이
   생산성 및 유지보수성에 있어서 매우 유리하다.
 - enum문으로 선언하여 만든 변수에 대해서는 switch 조건문을 사용하여 알고리즘을 작성하면
   알고리즘 작성 및 수정이 용이해진다.
 - 클래스의 private 멤버 변수에 대하여 외부에서 정보를 설정 및 확인을 해야하는 경우
   겟터와 셋터 함수를 만들어서 사용하도록 한다.

강의 과제
 - 이번 강의에서 약식으로 만들고 넘어간 부분들에 대해 간단한 계획을 세우면서 복습하기

===============================================

28강. 텍스트형 RPG 게임 5 - 플레이어, 몬스터, 전투

강의 내용
 - 항상 필요한 클래스가 아닌 경우 필요할 때 생성하여 사용하고 사용이 끝난 뒤에
   삭제를 하는 방식으로 관리를 해주는 것이 좋다.
 - 예를 들어 몬스터 클래스의 경우 던전에 입장 후 전투시에만 필요하기 때문에
   몬스터를 생성하고 전투 종료 후에 삭제하는 방식으로 만들어진다.
 - 동적 할당(pointer)으로 사용하는 데이터들에 대해서는 생성하는 시점과
   삭제하는 시점이 매우 중요하다.

강의 과제
 - 약식으로 만들고 넘어간 부분을 간단하게라도 완성을 시키면서 배운 내용을 복습하기
